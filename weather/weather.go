package weather

import (
	"encoding/json"
	"reflect"
	"log"
	"github.com/mitchellh/mapstructure"
	"net/http"
)


type AutoGenerated struct {
	Coord struct {
		Lon float64 `json:"lon"`
		Lat float64 `json:"lat"`
	} `json:"coord"`
	Weather []struct {
		ID          int    `json:"id"`
		Main        string `json:"main"`
		Description string `json:"description"`
		Icon        string `json:"icon"`
	} `json:"weather"`
	Base string `json:"base"`
	Main struct {
		Temp      int     `json:"temp"`
		FeelsLike float64 `json:"feels_like"`
		TempMin   float64 `json:"temp_min"`
		TempMax   float64 `json:"temp_max"`
		Pressure  int     `json:"pressure"`
		Humidity  int     `json:"humidity"`
	} `json:"main"`
	Visibility int `json:"visibility"`
	Wind       struct {
		Speed int `json:"speed"`
		Deg   int `json:"deg"`
	} `json:"wind"`
	Clouds struct {
		All int `json:"all"`
	} `json:"clouds"`
	Dt  int `json:"dt"`
	Sys struct {
		Type    int    `json:"type"`
		ID      int    `json:"id"`
		Country string `json:"country"`
		Sunrise int    `json:"sunrise"`
		Sunset  int    `json:"sunset"`
	} `json:"sys"`
	Timezone int    `json:"timezone"`
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Cod      int    `json:"cod"`
}

type ReturnStruct struct {
	Temp      int     `json:"temp"`
	FeelsLike float64 `json:"feels_like"`
	TempMin   float64 `json:"temp_min"`
	TempMax   float64 `json:"temp_max"`
	Pressure  int     `json:"pressure"`
	Humidity  int     `json:"humidity"`
	City  string   `json:"City"`
	Type    int    `json:"type"`
	ID      int    `json:"id"`
	Country string `json:"country"`
	Sunrise int    `json:"sunrise"`
	Sunset  int    `json:"sunset"`
}

var (
	weatherBaseUrl = "https://api.openweathermap.org"
	weatherSubPath = "/data/2.5/weather"
	defaultLocationId = "2947444"
	defaultUnitType =  "metric"
	defaultToken = "3a20a64aa7cb7e38a83c7cb2b48ab460"
)


func weatherApiGather( unitType, locationId, token string ) AutoGenerated {

	//resp, err := http.Get("https://api.openweathermap.org/data/2.5/weather?id=2947444&units=metric&appid=3a20a64aa7cb7e38a83c7cb2b48ab460")
	resp, err := http.Get(weatherBaseUrl + weatherSubPath + "?id=" + locationId + "&units=" + unitType + "&appid=" + token)
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()
	var results AutoGenerated
	json.NewDecoder(resp.Body).Decode(&results)
	return results
}




func GetFromApi() ReturnStruct {
	gatheredData := weatherApiGather(defaultUnitType, defaultLocationId, defaultToken)
	var RStruct ReturnStruct
	returnMap := make(map[string]interface{})
	g := reflect.ValueOf(gatheredData.Sys)
	typeOfg := g.Type()
	for i := 0; i< g.NumField(); i++{
		addKey := typeOfg.Field(i).Name

		returnMap[addKey] = g.Field(i).Interface()
	}
	lg := reflect.ValueOf(gatheredData.Main)
	typeOflg := lg.Type()
	for i := 0; i< lg.NumField(); i++{
		addKey := typeOflg.Field(i).Name
		returnMap[addKey] = lg.Field(i).Interface()
	}

	returnMap["City"] = gatheredData.Name
	mapstructure.Decode(returnMap, &RStruct)
	return RStruct


}